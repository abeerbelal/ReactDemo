{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alfalak\\\\Desktop\\\\01-starting-project\\\\src\\\\store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  //we define the general shape of our context and get better auto-completion later\n  token: '',\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\n//export it as named \nexport const AuthContextProvider = props => {\n  _s();\n  //set init token val by looking at local storage without use useEffect because local storage is a sync api\"the init val will be used once by react '\n  const initialToken = localStorage.getItem('token');\n  //i wanna manage the state for that auth data \n  const [token, setToken] = useState(initialToken); //we can know whenever the user is logged or not be looking to this state\n  //if we have token the user is logged in \n  const userIsLoggedIn = !!token;\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem('token', token);\n  };\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem('token');\n  };\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n\n  //receive props because it will return\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 8\n  }, this);\n  //so that we can use this component overall as a wrapper around other components \n  //that then will have accsess to this context\n};\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","loginHandler","expirationTime","setItem","logoutHandler","removeItem","contextValue","children"],"sources":["C:/Users/alfalak/Desktop/01-starting-project/src/store/auth-context.js"],"sourcesContent":["import React,{useState} from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n//we define the general shape of our context and get better auto-completion later\r\n    token: '',\r\n    isLoggedIn: false,\r\n    login: (token) => {},\r\n    logout: () => {}\r\n\r\n});\r\n\r\n\r\n//export it as named \r\n export const AuthContextProvider =(props) => {\r\n  //set init token val by looking at local storage without use useEffect because local storage is a sync api\"the init val will be used once by react '\r\n  const initialToken = localStorage.getItem('token');\r\n     //i wanna manage the state for that auth data \r\n    const [token, setToken] = useState(initialToken);//we can know whenever the user is logged or not be looking to this state\r\n   //if we have token the user is logged in \r\n  const userIsLoggedIn = !!token;\r\n\r\n  const loginHandler = (token, expirationTime) =>{\r\n    setToken(token);\r\n    localStorage.setItem('token', token );\r\n  };\r\n\r\n  const logoutHandler = () =>{\r\n    setToken(null);\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler\r\n  };\r\n\r\n//receive props because it will return\r\nreturn <AuthContext.Provider value={contextValue}>\r\n    {props.children}\r\n</AuthContext.Provider>\r\n//so that we can use this component overall as a wrapper around other components \r\n//that then will have accsess to this context\r\n};\r\n\r\nexport default AuthContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AAAC;AAErC,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAa,CAAC;EACxC;EACIC,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAGF,KAAK,IAAK,CAAC,CAAC;EACpBG,MAAM,EAAE,MAAM,CAAC;AAEnB,CAAC,CAAC;;AAGF;AACC,OAAO,MAAMC,mBAAmB,GAAGC,KAAK,IAAK;EAAA;EAC5C;EACA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC/C;EACD,MAAM,CAACR,KAAK,EAAES,QAAQ,CAAC,GAAGZ,QAAQ,CAACS,YAAY,CAAC,CAAC;EAClD;EACD,MAAMI,cAAc,GAAG,CAAC,CAACV,KAAK;EAE9B,MAAMW,YAAY,GAAG,CAACX,KAAK,EAAEY,cAAc,KAAI;IAC7CH,QAAQ,CAACT,KAAK,CAAC;IACfO,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEb,KAAK,CAAE;EACvC,CAAC;EAED,MAAMc,aAAa,GAAG,MAAK;IACzBL,QAAQ,CAAC,IAAI,CAAC;IACdF,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED,MAAMC,YAAY,GAAG;IACnBhB,KAAK,EAAEA,KAAK;IACZC,UAAU,EAAES,cAAc;IAC1BR,KAAK,EAAES,YAAY;IACnBR,MAAM,EAAEW;EACV,CAAC;;EAEH;EACA,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEE,YAAa;IAAA,UAC5CX,KAAK,CAACY;EAAQ;IAAA;IAAA;IAAA;EAAA,QACI;EACvB;EACA;AACA,CAAC;AAAC,GA/BYb,mBAAmB;AAAA,KAAnBA,mBAAmB;AAiCjC,eAAeN,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}